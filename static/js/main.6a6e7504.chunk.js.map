{"version":3,"sources":["icon.png","components/Header.js","no-poster.png","components/Movie.js","components/Info.js","components/Footer.js","App.js","index.js"],"names":["Header","props","className","id","src","Icon","alt","Modal","setAppElement","Movie","months","useState","selection","setSelection","modalOpen","setModalOpen","formatTitle","title","year","undefined","formatDate","dateString","d","Date","getMonth","getDate","getFullYear","formatTime","timeString","time","match","hours","Math","floor","mins","formatMetascore","metascore","score","parseInt","isNaN","scoreClass","movies","map","movie","Card","Img","Poster","NoPoster","Body","Title","Year","onClick","a","apiURL","process","fetch","response","json","fetchMovie","open","imdbID","overlayClassName","isOpen","onRequestClose","Released","Runtime","Genre","Director","Metascore","Plot","Info","setMovies","query","setQuery","results","setResults","page","setPage","showMovies","setShowMovies","fetchMovies","pageNum","encodeURIComponent","apiUrl","totalResults","Search","onSubmit","e","preventDefault","htmlFor","value","type","onChange","target","disabled","class","Footer","href","rel","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a6e7504.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon.e27c8138.png\";","import React from 'react';\nimport './Header.css';\nimport Icon from '../icon.png';\n\nfunction Header(props) {\n  return (\n    <div className=\"header\">\n      <img id=\"icon\" src={Icon} alt=\"icon\"/>\n      <h1>What's That Movie?</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/no-poster.30c202b1.png\";","import React, { useState } from 'react';\nimport './Movie.css';\nimport { Card } from 'react-bootstrap';\nimport Modal from 'react-modal';\nimport NoPoster from '../no-poster.png';\n\nModal.setAppElement('#root');\n\nfunction Movie(props) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  const [selection, setSelection] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n\n  function open(id) {\n    async function fetchMovie() {\n      const apiURL = `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_API_KEY}&i=${id}&r=json`;\n      let response = await fetch(apiURL);\n      response = await response.json();\n      setSelection(response);\n    }\n\n    fetchMovie();\n    setModalOpen(true);\n  }\n\n  function formatTitle(title, year) {\n    if (year === 'N/A' || year === undefined) {\n      return title;\n    }\n\n    // Format movie title as \"Title (Year)\"\n    return `${title} (${year})`;\n  }\n\n  function formatDate(dateString) {\n    if (dateString === 'N/A' || dateString === undefined) {\n      return dateString;\n    }\n\n    // Format date in the American style (Month Day, Year)\n    let d = new Date(dateString);\n    return `${months[d.getMonth()]} ${d.getDate()}, ${d.getFullYear()}`;\n  }\n\n  function formatTime(timeString) {\n    if (timeString === 'N/A' || timeString === undefined) {\n      return timeString;\n    }\n\n    // Separate time into hours and minutes\n    let time = timeString.match(/(\\d+) min/)[1];\n    let hours = Math.floor(time / 60);\n    let mins = time % 60;\n\n    if (hours !== 0) {\n      return `${hours} hr ${mins} min`;\n    }\n\n    return `${mins} min`;\n  }\n\n  function formatMetascore(metascore) {\n    let score = parseInt(metascore);\n    if (metascore === 'N/A' || metascore === undefined || isNaN(score)) {\n      return metascore;\n    }\n\n    // Value of score determines CSS class, which determines displayed color\n    let scoreClass = '';\n    if (score > 80) {\n      scoreClass = 'score great';\n    } else if (score > 60) {\n      scoreClass = 'score good';\n    } else if (score > 40) {\n      scoreClass = 'score ok';\n    } else if (score > 20) {\n      scoreClass = 'score bad';\n    } else {\n      scoreClass = 'score awful';\n    }\n\n    return (\n      <span className={scoreClass}>{score}/100</span>\n    );\n  }\n\n  return (\n    <div>\n      {props.movies.map(movie => {\n        return (\n          <Card className=\"card\" key={movie.imdbID}>\n            <Card.Img className=\"cardImage\" src={movie.Poster !== 'N/A' ? movie.Poster : NoPoster}/>\n\n          <div className=\"description\">\n              <Card.Body className=\"descriptionText\">\n                <Card.Title className=\"title\">{formatTitle(movie.Title, movie.Year)}</Card.Title>\n\n                <button className=\"moreInfo\" onClick={() => open(movie.imdbID)}>More info</button>\n\n                <Modal className=\"modal\" overlayClassName=\"modalOverlay\" isOpen={modalOpen} onRequestClose={() => setModalOpen(!modalOpen)}>\n                  <div className=\"modalInfo\">\n                    <h2>{formatTitle(selection.Title, selection.Year)}</h2>\n                    <p>Release Date: {formatDate(selection.Released)}</p>\n                    <p>Runtime: {formatTime(selection.Runtime)}</p>\n                    <p>Genre(s): {selection.Genre}</p>\n                    <p>Director(s): {selection.Director}</p>\n                    <p>Rating: {formatMetascore(selection.Metascore)}</p>\n                    <br></br>\n                    <p>{selection.Plot !== 'N/A' ? selection.Plot : 'No plot synopsis available.'}</p>\n                  </div>\n                </Modal>\n              </Card.Body>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Movie;\n","import React, { useState } from 'react';\nimport './Info.css';\nimport Movie from './Movie';\n\nfunction Info() {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState(0);\n  const [page, setPage] = useState(1);\n  const [showMovies, setShowMovies] = useState(false);\n\n  async function fetchMovies(pageNum) {\n    setPage(pageNum);\n    const title = encodeURIComponent(query);\n    const apiUrl = `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_API_KEY}&s=${title}&type=movie&page=${pageNum}&r=json`;\n\n    let response = await fetch(apiUrl);\n    response = await response.json();\n\n    // Ensure that state variables are never undefined\n    setResults(response.totalResults !== undefined ? response.totalResults : 0);\n    setMovies(response.Search !== undefined ? response.Search : []);\n    setShowMovies(response.totalResults !== undefined ? true : false);\n  }\n\n  function submit(e) {\n    e.preventDefault();\n    fetchMovies(1);\n  }\n\n  return (\n    <div className=\"info\">\n      <div id=\"searchHeader\">\n        <form onSubmit={submit}>\n          <label id=\"description\" htmlFor=\"queryInput\">Movie Name:</label>\n          <input id=\"input\" value={query} type=\"text\"\n            onChange={e => setQuery(e.target.value)}/>\n          <button id=\"search\">Search</button>\n        </form>\n\n        {showMovies ? <button className=\"nav\" disabled={page === 1} onClick={() => fetchMovies(page - 1)}>Previous Page</button> : <></>}\n        {showMovies ? <button className=\"nav\" disabled={page * 10 >= results} onClick={() => fetchMovies(page + 1)}>Next Page</button> : <></>}\n      </div>\n\n      {showMovies ? <Movie class=\"searchResult\" movies={movies}></Movie> : <></>}\n    </div>\n  );\n}\n\nexport default Info;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer(props) {\n  return (\n    <div className=\"footer\">\n      <h4>Made by <a href=\"https://tianyizheng02.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Tianyi Zheng</a></h4>\n    </div>\n  );\n}\n\nexport default Footer;\n","import './App.css';\nimport Header from './components/Header';\nimport Info from './components/Info';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Info></Info>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}