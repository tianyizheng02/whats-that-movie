{"version":3,"sources":["components/Header.js","no-poster.png","components/Movie.js","components/Info.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","Modal","setAppElement","Movie","months","useState","selection","setSelection","modalOpen","setModalOpen","formatTitle","title","year","undefined","formatDate","dateString","d","Date","getMonth","getDate","getFullYear","formatTime","timeString","time","match","hours","Math","floor","mins","formatMetascore","metascore","score","parseInt","NaN","movies","map","movie","Card","Img","src","Poster","NoPoster","Body","Title","Year","onClick","id","a","apiURL","process","fetch","response","json","fetchMovie","open","imdbID","overlayClassName","isOpen","onRequestClose","Released","Runtime","Genre","Director","Metascore","Plot","Info","setMovies","query","setQuery","results","setResults","page","setPage","showMovies","setShowMovies","fetchMovies","pageNum","encodeURIComponent","apiUrl","totalResults","Search","onSubmit","e","preventDefault","htmlFor","value","type","onChange","target","disabled","class","Footer","href","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAWeA,MARf,SAAgBC,GACd,OACE,qBAAKC,UAAU,SAAf,SACE,uD,oECNS,MAA0B,sCCMzCC,IAAMC,cAAc,SA2HLC,MAzHf,SAAeJ,GACb,IAAMK,EAAS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE9H,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAcA,SAASC,EAAYC,EAAOC,GAC1B,MAAa,QAATA,QAA2BC,IAATD,EACbD,EAGH,GAAN,OAAUA,EAAV,aAAoBC,EAApB,KAGF,SAASE,EAAWC,GAClB,GAAmB,QAAfA,QAAuCF,IAAfE,EAC1B,OAAOA,EAGT,IAAIC,EAAI,IAAIC,KAAKF,GACjB,MAAM,GAAN,OAAUX,EAAOY,EAAEE,YAAnB,YAAkCF,EAAEG,UAApC,aAAkDH,EAAEI,eAGtD,SAASC,EAAWC,GAClB,GAAmB,QAAfA,QAAuCT,IAAfS,EAC1B,OAAOA,EAGT,IAAIC,EAAOD,EAAWE,MAAM,aAAa,GACrCC,EAAQC,KAAKC,MAAMJ,EAAO,IAC1BK,EAAOL,EAAO,GAElB,OAAc,IAAVE,EACI,GAAN,OAAUA,EAAV,eAAsBG,EAAtB,QAGI,GAAN,OAAUA,EAAV,QAGF,SAASC,EAAgBC,GACvB,IAAIC,EAAQC,SAASF,GACrB,MAAkB,QAAdA,QAAqCjB,IAAdiB,GAAqCG,MAAVF,EAC7CD,EAGLC,EAAQ,GAER,uBAAM/B,UAAU,cAAhB,UAA+B+B,EAA/B,UAIAA,EAAQ,GAER,uBAAM/B,UAAU,aAAhB,UAA8B+B,EAA9B,UAIAA,GAAS,GAET,uBAAM/B,UAAU,WAAhB,UAA4B+B,EAA5B,UAIAA,EAAQ,GAER,uBAAM/B,UAAU,YAAhB,UAA6B+B,EAA7B,UAKF,uBAAM/B,UAAU,cAAhB,UAA+B+B,EAA/B,UAIJ,OACE,8BACGhC,EAAMmC,OAAOC,KAAI,SAAAC,GAChB,OACE,eAACC,EAAA,EAAD,CAAMrC,UAAU,OAAhB,UACE,cAACqC,EAAA,EAAKC,IAAN,CAAUtC,UAAU,YAAYuC,IAAsB,QAAjBH,EAAMI,OAAmBJ,EAAMI,OAASC,IAE/E,qBAAKzC,UAAU,cAAf,SACI,eAACqC,EAAA,EAAKK,KAAN,CAAW1C,UAAU,kBAArB,UACE,cAACqC,EAAA,EAAKM,MAAN,CAAY3C,UAAU,QAAtB,SAA+BU,EAAY0B,EAAMO,MAAOP,EAAMQ,QAE9D,wBAAQ5C,UAAU,WAAW6C,QAAS,kBA3FpD,SAAcC,GAAI,4CAChB,8BAAAC,EAAA,6DACQC,EADR,0CACoDC,WADpD,cACuFH,EADvF,oBAEuBI,MAAMF,GAF7B,cAEMG,EAFN,gBAGmBA,EAASC,OAH5B,OAGED,EAHF,OAIE5C,EAAa4C,GAJf,4CADgB,uBAAC,WAAD,wBAQhBE,GACA5C,GAAa,GAkF2C6C,CAAKlB,EAAMmB,SAAvD,uBAEA,cAAC,IAAD,CAAOvD,UAAU,QAAQwD,iBAAiB,eAAeC,OAAQjD,EAAWkD,eAAgB,kBAAMjD,GAAcD,IAAhH,SAEE,sBAAKR,UAAU,YAAf,UACE,6BAAKU,EAAYJ,EAAUqC,MAAOrC,EAAUsC,QAC5C,+CAAkB9B,EAAWR,EAAUqD,aACvC,0CAAatC,EAAWf,EAAUsD,YAClC,2CAActD,EAAUuD,SACxB,8CAAiBvD,EAAUwD,YAC3B,yCAAYjC,EAAgBvB,EAAUyD,cACtC,uBACA,4BAAuB,QAAnBzD,EAAU0D,KAAiB1D,EAAU0D,KAAO,4CAnB9B5B,EAAMmB,cClD7BU,MA5Cf,WACE,MAA4B5D,mBAAS,IAArC,mBAAO6B,EAAP,KAAegC,EAAf,KACA,EAA0B7D,mBAAS,IAAnC,mBAAO8D,EAAP,KAAcC,EAAd,KACA,EAA8B/D,mBAAS,GAAvC,mBAAOgE,EAAP,KAAgBC,EAAhB,KACA,EAAwBjE,mBAAS,GAAjC,mBAAOkE,EAAP,KAAaC,EAAb,KACA,EAAoCnE,oBAAS,GAA7C,mBAAOoE,EAAP,KAAmBC,EAAnB,KALc,SAOCC,EAPD,8EAOd,WAA2BC,GAA3B,mBAAA7B,EAAA,6DACEyB,EAAQI,GACFjE,EAAQkE,mBAAmBV,GAC3BW,EAHR,0CAGoD7B,WAHpD,cAGuFtC,EAHvF,4BAGgHiE,EAHhH,oBAKuB1B,MAAM4B,GAL7B,cAKM3B,EALN,gBAMmBA,EAASC,OAN5B,OAMED,EANF,OAQEmB,OAAqCzD,IAA1BsC,EAAS4B,aAA6B5B,EAAS4B,aAAe,GACzEb,OAA8BrD,IAApBsC,EAAS6B,OAAuB7B,EAAS6B,OAAS,IAC5DN,OAAwC7D,IAA1BsC,EAAS4B,cAVzB,6CAPc,sBAyBd,OACE,sBAAK/E,UAAU,OAAf,UACE,sBAAK8C,GAAG,eAAR,UACE,uBAAMmC,SARZ,SAAgBC,GACdA,EAAEC,iBACFR,EAAY,IAMR,UACE,uBAAO7B,GAAG,cAAcsC,QAAQ,aAAhC,yBACA,uBAAOtC,GAAG,QAAQuC,MAAOlB,EAAOmB,KAAK,OACnCC,SAAU,SAAAL,GAAC,OAAId,EAASc,EAAEM,OAAOH,UACnC,wBAAQvC,GAAG,SAAX,uBAGD2B,EAAa,wBAAQzE,UAAU,MAAMyF,SAAmB,IAATlB,EAAY1B,QAAS,kBAAM8B,EAAYJ,EAAO,IAAhF,2BAA6G,6BAC1HE,EAAa,wBAAQzE,UAAU,MAAMyF,SAAiB,GAAPlB,GAAaF,EAASxB,QAAS,kBAAM8B,EAAYJ,EAAO,IAA1F,uBAAmH,gCAGlIE,EAAa,cAAC,EAAD,CAAOiB,MAAM,eAAexD,OAAQA,IAAmB,iC,MChC5DyD,MARf,SAAgB5F,GACd,OACE,qBAAKC,UAAU,SAAf,SACE,0CAAY,mBAAG4F,KAAK,mCAAmCJ,OAAO,SAASK,IAAI,sBAA/D,gCCSHC,MAVf,WACE,OACE,sBAAK9F,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCES+F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.95a6f1db.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header(props) {\n  return (\n    <div className=\"header\">\n      <h1>What's That Movie?</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/no-poster.30c202b1.png\";","import React, { useState } from 'react';\nimport './Movie.css';\nimport { Card } from 'react-bootstrap';\nimport Modal from 'react-modal';\nimport NoPoster from '../no-poster.png';\n\nModal.setAppElement('#root');\n\nfunction Movie(props) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  const [selection, setSelection] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n\n  function open(id) {\n    async function fetchMovie() {\n      const apiURL = `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_API_KEY}&i=${id}&r=json`;\n      let response = await fetch(apiURL);\n      response = await response.json();\n      setSelection(response);\n    }\n\n    fetchMovie();\n    setModalOpen(true);\n  }\n\n  function formatTitle(title, year) {\n    if (year === 'N/A' || year === undefined) {\n      return title;\n    }\n\n    return `${title} (${year})`;\n  }\n\n  function formatDate(dateString) {\n    if (dateString === 'N/A' || dateString === undefined) {\n      return dateString;\n    }\n\n    let d = new Date(dateString);\n    return `${months[d.getMonth()]} ${d.getDate()}, ${d.getFullYear()}`;\n  }\n\n  function formatTime(timeString) {\n    if (timeString === 'N/A' || timeString === undefined) {\n      return timeString;\n    }\n\n    let time = timeString.match(/(\\d+) min/)[1];\n    let hours = Math.floor(time / 60);\n    let mins = time % 60;\n\n    if (hours !== 0) {\n      return `${hours} hr ${mins} min`;\n    }\n\n    return `${mins} min`;\n  }\n\n  function formatMetascore(metascore) {\n    let score = parseInt(metascore);\n    if (metascore === 'N/A' || metascore === undefined || score === NaN) {\n      return metascore;\n    }\n\n    if (score > 80) {\n      return (\n        <span className=\"score great\">{score}/100</span>\n      );\n    }\n\n    if (score > 60) {\n      return (\n        <span className=\"score good\">{score}/100</span>\n      );\n    }\n\n    if (score >= 40) {\n      return (\n        <span className=\"score ok\">{score}/100</span>\n      );\n    }\n\n    if (score > 20) {\n      return (\n        <span className=\"score bad\">{score}/100</span>\n      );\n    }\n\n    return (\n      <span className=\"score awful\">{score}/100</span>\n    );\n  }\n\n  return (\n    <div>\n      {props.movies.map(movie => {\n        return (\n          <Card className=\"card\" key={movie.imdbID}>\n            <Card.Img className=\"cardImage\" src={movie.Poster !== 'N/A' ? movie.Poster : NoPoster}/>\n\n          <div className=\"description\">\n              <Card.Body className=\"descriptionText\">\n                <Card.Title className=\"title\">{formatTitle(movie.Title, movie.Year)}</Card.Title>\n\n                <button className=\"moreInfo\" onClick={() => open(movie.imdbID)}>More info</button>\n\n                <Modal className=\"modal\" overlayClassName=\"modalOverlay\" isOpen={modalOpen} onRequestClose={() => setModalOpen(!modalOpen)}>\n\n                  <div className=\"modalInfo\">\n                    <h2>{formatTitle(selection.Title, selection.Year)}</h2>\n                    <p>Release Date: {formatDate(selection.Released)}</p>\n                    <p>Runtime: {formatTime(selection.Runtime)}</p>\n                    <p>Genre(s): {selection.Genre}</p>\n                    <p>Director(s): {selection.Director}</p>\n                    <p>Rating: {formatMetascore(selection.Metascore)}</p>\n                    <br></br>\n                    <p>{selection.Plot !== 'N/A' ? selection.Plot : 'No plot synopsis available.'}</p>\n                  </div>\n                </Modal>\n              </Card.Body>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Movie;\n","import React, { useState } from 'react';\nimport './Info.css';\nimport Movie from './Movie';\n\nfunction Info() {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState(0);\n  const [page, setPage] = useState(1);\n  const [showMovies, setShowMovies] = useState(false);\n\n  async function fetchMovies(pageNum) {\n    setPage(pageNum);\n    const title = encodeURIComponent(query);\n    const apiUrl = `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_API_KEY}&s=${title}&type=movie&page=${pageNum}&r=json`;\n\n    let response = await fetch(apiUrl);\n    response = await response.json();\n\n    setResults(response.totalResults !== undefined ? response.totalResults : 0);\n    setMovies(response.Search !== undefined ? response.Search : []);\n    setShowMovies(response.totalResults !== undefined ? true : false);\n  }\n\n  function submit(e) {\n    e.preventDefault();\n    fetchMovies(1);\n  }\n\n  return (\n    <div className=\"info\">\n      <div id=\"searchHeader\">\n        <form onSubmit={submit}>\n          <label id=\"description\" htmlFor=\"queryInput\">Movie Name:</label>\n          <input id=\"input\" value={query} type=\"text\"\n            onChange={e => setQuery(e.target.value)}/>\n          <button id=\"search\">Search</button>\n        </form>\n\n        {showMovies ? <button className=\"nav\" disabled={page === 1} onClick={() => fetchMovies(page - 1)}>Previous Page</button> : <></>}\n        {showMovies ? <button className=\"nav\" disabled={page * 10 >= results} onClick={() => fetchMovies(page + 1)}>Next Page</button> : <></>}\n      </div>\n\n      {showMovies ? <Movie class=\"searchResult\" movies={movies}></Movie> : <></>}\n    </div>\n  );\n}\n\nexport default Info;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer(props) {\n  return (\n    <div className=\"footer\">\n      <h4>Made by <a href=\"https://tianyizheng02.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Tianyi Zheng</a></h4>\n    </div>\n  );\n}\n\nexport default Footer;\n","import './App.css';\nimport Header from './components/Header';\nimport Info from './components/Info';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Info></Info>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}